{"version":3,"file":"static/js/66.09c8f972.chunk.js","mappings":"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","sources":["../node_modules/@web3auth/phantom-adapter/src/utils.ts","../node_modules/@web3auth/phantom-adapter/src/phantomAdapter.ts"],"sourcesContent":["import type { IPhantomWalletProvider } from \"@web3auth/solana-provider\";\n\nexport function poll(callback: () => boolean | Promise<boolean>, interval: number, count: number): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    if (count > 0) {\n      setTimeout(async () => {\n        const done = await callback();\n        if (done) resolve(done);\n        if (!done)\n          poll(callback, interval, count - 1)\n            .then((res) => {\n              resolve(res);\n              return res;\n            })\n            .catch((err) => reject(err));\n      }, interval);\n    } else {\n      resolve(false);\n    }\n  });\n}\n\nexport const detectProvider = async (\n  options: { interval: number; count: number } = { interval: 1000, count: 3 }\n): Promise<IPhantomWalletProvider | null> => {\n  const isPhantomAvailable = typeof window !== \"undefined\" && !!(window as any).solana?.isPhantom;\n  if (isPhantomAvailable) {\n    return (window as any).solana;\n  }\n  const isAvailable = await poll(() => (window as any).solana?.isPhantom, options.interval, options.count);\n  if (isAvailable) return (window as any).solana;\n  return null;\n};\n","import {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapter,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { IPhantomWalletProvider, PhantomInjectedProvider } from \"@web3auth/solana-provider\";\n\nimport { detectProvider } from \"./utils\";\nexport interface PhantomAdapterOptions {\n  chainConfig?: CustomChainConfig;\n}\n\nexport class PhantomAdapter extends BaseAdapter<void> {\n  readonly name: string = WALLET_ADAPTERS.PHANTOM;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.SOLANA;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.SOLANA;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public _wallet: IPhantomWalletProvider | null = null;\n\n  private phantomProvider: PhantomInjectedProvider | null = null;\n\n  private rehydrated = false;\n\n  constructor(options: PhantomAdapterOptions = {}) {\n    super();\n    this.chainConfig = options.chainConfig || null;\n  }\n\n  get isWalletConnected(): boolean {\n    return !!(this._wallet?.isConnected && this.status === ADAPTER_STATUS.CONNECTED);\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.phantomProvider?.provider || null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  setAdapterSettings(_: unknown): void {}\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    // set chainConfig for mainnet by default if not set\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, \"0x1\");\n    }\n    this._wallet = await detectProvider({ interval: 500, count: 3 });\n    if (!this._wallet) throw WalletInitializationError.notInstalled();\n    this.phantomProvider = new PhantomInjectedProvider({ config: { chainConfig: this.chainConfig as CustomChainConfig } });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.PHANTOM);\n\n    try {\n      log.debug(\"initializing phantom adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached phantom provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    try {\n      super.checkConnectionRequirements();\n      this.status = ADAPTER_STATUS.CONNECTING;\n      this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.PHANTOM });\n\n      if (!this._wallet) throw WalletInitializationError.notInstalled();\n      if (!this._wallet.isConnected) {\n        const handleDisconnect = this._wallet._handleDisconnect;\n        try {\n          await new Promise<SafeEventEmitterProvider | null>((resolve, reject) => {\n            const connect = async () => {\n              await this.connectWithProvider(this._wallet as IPhantomWalletProvider);\n              resolve(this.provider);\n            };\n            if (!this._wallet) return reject(WalletInitializationError.notInstalled());\n            this._wallet.once(\"connect\", connect);\n            // Raise an issue on phantom that if window is closed, disconnect event is not fired\n            (this._wallet as IPhantomWalletProvider)._handleDisconnect = (...args: unknown[]) => {\n              reject(WalletInitializationError.windowClosed());\n              return handleDisconnect.apply(this._wallet, args);\n            };\n\n            this._wallet.connect().catch((reason: unknown) => {\n              reject(reason);\n            });\n          });\n        } catch (error: unknown) {\n          if (error instanceof Web3AuthError) throw error;\n          throw WalletLoginError.connectionError((error as Error)?.message);\n        } finally {\n          this._wallet._handleDisconnect = handleDisconnect;\n        }\n      } else {\n        await this.connectWithProvider(this._wallet);\n      }\n\n      if (!this._wallet.publicKey) throw WalletLoginError.connectionError();\n      this._wallet.on(\"disconnect\", this._onDisconnect);\n\n      return this.provider;\n    } catch (error: unknown) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw error;\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    try {\n      await this._wallet?.disconnect();\n      if (options.cleanup) {\n        this.status = ADAPTER_STATUS.NOT_READY;\n        this.phantomProvider = null;\n        this._wallet = null;\n      }\n      this.emit(ADAPTER_EVENTS.DISCONNECTED);\n    } catch (error: unknown) {\n      this.emit(ADAPTER_EVENTS.ERRORED, WalletLoginError.disconnectionError((error as Error)?.message));\n    }\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  private async connectWithProvider(injectedProvider: IPhantomWalletProvider): Promise<SafeEventEmitterProvider | null> {\n    if (!this.phantomProvider) throw WalletLoginError.connectionError(\"No phantom provider\");\n    await this.phantomProvider.setupProvider(injectedProvider);\n    this.status = ADAPTER_STATUS.CONNECTED;\n    this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.PHANTOM, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n    return this.provider;\n  }\n\n  private _onDisconnect = () => {\n    if (this._wallet) {\n      this._wallet.off(\"disconnect\", this._onDisconnect);\n      this.rehydrated = false;\n      // ready to be connected again only if it was previously connected and not cleaned up\n      this.status = this.status === ADAPTER_STATUS.CONNECTED ? ADAPTER_STATUS.READY : ADAPTER_STATUS.NOT_READY;\n      this.emit(ADAPTER_EVENTS.DISCONNECTED);\n    }\n  };\n}\n"],"names":["poll","callback","interval","count","Promise","resolve","reject","setTimeout","done","then","res","catch","err","detectProvider","options","window","solana","_window$solana","isPhantom","_window$solana2","PhantomAdapter","constructor","_defineProperty","WALLET_ADAPTERS","ADAPTER_NAMESPACES","CHAIN_NAMESPACES","ADAPTER_CATEGORY","ADAPTER_STATUS","_wallet","off","_onDisconnect","rehydrated","status","emit","ADAPTER_EVENTS","chainConfig","isConnected","this","provider","phantomProvider","_","Error","setAdapterSettings","getChainConfig","WalletInitializationError","PhantomInjectedProvider","config","log","autoConnect","connect","_this","adapter","handleDisconnect","_handleDisconnect","connectWithProvider","once","args","arguments","apply","reason","error","Web3AuthError","WalletLoginError","message","publicKey","on","cleanup","isWalletConnected","_this$_wallet2","disconnect","injectedProvider","setupProvider","reconnected","BaseAdapter"],"sourceRoot":""}