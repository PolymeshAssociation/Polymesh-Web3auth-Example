{"version":3,"file":"static/js/66.662baecb.chunk.js","mappings":"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","sources":["../node_modules/@web3auth/phantom-adapter/src/utils.ts","../node_modules/@web3auth/phantom-adapter/src/phantomAdapter.ts"],"sourcesContent":["import type { IPhantomWalletProvider } from \"@web3auth/solana-provider\";\n\nexport function poll(callback: () => boolean | Promise<boolean>, interval: number, count: number): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    if (count > 0) {\n      setTimeout(async () => {\n        const done = await callback();\n        if (done) resolve(done);\n        if (!done)\n          poll(callback, interval, count - 1)\n            .then((res) => {\n              resolve(res);\n              return res;\n            })\n            .catch((err) => reject(err));\n      }, interval);\n    } else {\n      resolve(false);\n    }\n  });\n}\n\nexport const detectProvider = async (\n  options: { interval: number; count: number } = { interval: 1000, count: 3 }\n): Promise<IPhantomWalletProvider | null> => {\n  const isPhantomAvailable = typeof window !== \"undefined\" && !!(window as any).solana?.isPhantom;\n  if (isPhantomAvailable) {\n    return (window as any).solana;\n  }\n  const isAvailable = await poll(() => (window as any).solana?.isPhantom, options.interval, options.count);\n  if (isAvailable) return (window as any).solana;\n  return null;\n};\n","import {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapter,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { IPhantomWalletProvider, PhantomInjectedProvider } from \"@web3auth/solana-provider\";\n\nimport { detectProvider } from \"./utils\";\nexport interface PhantomAdapterOptions {\n  chainConfig?: CustomChainConfig;\n}\n\nexport class PhantomAdapter extends BaseAdapter<void> {\n  readonly name: string = WALLET_ADAPTERS.PHANTOM;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.SOLANA;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.SOLANA;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public _wallet: IPhantomWalletProvider | null = null;\n\n  private phantomProvider: PhantomInjectedProvider | null = null;\n\n  private rehydrated = false;\n\n  constructor(options: PhantomAdapterOptions = {}) {\n    super();\n    this.chainConfig = options.chainConfig || null;\n  }\n\n  get isWalletConnected(): boolean {\n    return !!(this._wallet?.isConnected && this.status === ADAPTER_STATUS.CONNECTED);\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.phantomProvider?.provider || null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  setAdapterSettings(_: unknown): void {}\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    // set chainConfig for mainnet by default if not set\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, \"0x1\");\n    }\n    this._wallet = await detectProvider({ interval: 500, count: 3 });\n    if (!this._wallet) throw WalletInitializationError.notInstalled();\n    this.phantomProvider = new PhantomInjectedProvider({ config: { chainConfig: this.chainConfig as CustomChainConfig } });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.PHANTOM);\n\n    try {\n      log.debug(\"initializing phantom adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached phantom provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    try {\n      super.checkConnectionRequirements();\n      this.status = ADAPTER_STATUS.CONNECTING;\n      this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.PHANTOM });\n\n      if (!this._wallet) throw WalletInitializationError.notInstalled();\n      if (!this._wallet.isConnected) {\n        const handleDisconnect = this._wallet._handleDisconnect;\n        try {\n          await new Promise<SafeEventEmitterProvider | null>((resolve, reject) => {\n            const connect = async () => {\n              await this.connectWithProvider(this._wallet as IPhantomWalletProvider);\n              resolve(this.provider);\n            };\n            if (!this._wallet) return reject(WalletInitializationError.notInstalled());\n            this._wallet.once(\"connect\", connect);\n            // Raise an issue on phantom that if window is closed, disconnect event is not fired\n            (this._wallet as IPhantomWalletProvider)._handleDisconnect = (...args: unknown[]) => {\n              reject(WalletInitializationError.windowClosed());\n              return handleDisconnect.apply(this._wallet, args);\n            };\n\n            this._wallet.connect().catch((reason: unknown) => {\n              reject(reason);\n            });\n          });\n        } catch (error: unknown) {\n          if (error instanceof Web3AuthError) throw error;\n          throw WalletLoginError.connectionError((error as Error)?.message);\n        } finally {\n          this._wallet._handleDisconnect = handleDisconnect;\n        }\n      } else {\n        await this.connectWithProvider(this._wallet);\n      }\n\n      if (!this._wallet.publicKey) throw WalletLoginError.connectionError();\n      this._wallet.on(\"disconnect\", this._onDisconnect);\n\n      return this.provider;\n    } catch (error: unknown) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw error;\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    try {\n      await this._wallet?.disconnect();\n      if (options.cleanup) {\n        this.status = ADAPTER_STATUS.NOT_READY;\n        this.phantomProvider = null;\n        this._wallet = null;\n      }\n      this.emit(ADAPTER_EVENTS.DISCONNECTED);\n    } catch (error: unknown) {\n      this.emit(ADAPTER_EVENTS.ERRORED, WalletLoginError.disconnectionError((error as Error)?.message));\n    }\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  private async connectWithProvider(injectedProvider: IPhantomWalletProvider): Promise<SafeEventEmitterProvider | null> {\n    if (!this.phantomProvider) throw WalletLoginError.connectionError(\"No phantom provider\");\n    await this.phantomProvider.setupProvider(injectedProvider);\n    this.status = ADAPTER_STATUS.CONNECTED;\n    this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.PHANTOM, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n    return this.provider;\n  }\n\n  private _onDisconnect = () => {\n    if (this._wallet) {\n      this._wallet.off(\"disconnect\", this._onDisconnect);\n      this.rehydrated = false;\n      // ready to be connected again only if it was previously connected and not cleaned up\n      this.status = this.status === ADAPTER_STATUS.CONNECTED ? ADAPTER_STATUS.READY : ADAPTER_STATUS.NOT_READY;\n      this.emit(ADAPTER_EVENTS.DISCONNECTED);\n    }\n  };\n}\n"],"names":["poll","callback","interval","count","Promise","resolve","reject","setTimeout","async","done","then","res","catch","err","PhantomAdapter","BaseAdapter","constructor","options","super","_defineProperty","WALLET_ADAPTERS","ADAPTER_NAMESPACES","CHAIN_NAMESPACES","ADAPTER_CATEGORY","ADAPTER_STATUS","this","_wallet","off","_onDisconnect","rehydrated","status","emit","ADAPTER_EVENTS","chainConfig","isWalletConnected","isConnected","provider","phantomProvider","_","Error","setAdapterSettings","checkInitializationRequirements","getChainConfig","arguments","window","solana","_window$solana","isPhantom","_window$solana2","detectProvider","WalletInitializationError","PhantomInjectedProvider","config","log","autoConnect","connect","error","checkConnectionRequirements","adapter","connectWithProvider","handleDisconnect","_handleDisconnect","once","args","apply","_this","reason","Web3AuthError","WalletLoginError","message","publicKey","on","cleanup","_this$_wallet2","disconnect","injectedProvider","setupProvider","reconnected"],"sourceRoot":""}