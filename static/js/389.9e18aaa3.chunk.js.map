{"version":3,"file":"static/js/389.9e18aaa3.chunk.js","mappings":"gIAUAA,EAAAA,QAkBA,WAIM,IAJ0B,eAC9BC,GAAiB,EADa,OAE9BC,GAAS,EAFqB,QAG9BC,EAAU,KACN,uDAAF,GAEFC,IAEA,IAAIC,GAAU,EAEd,OAAO,IAAIC,SAASC,IAkBlB,SAASC,IAEP,GAAIH,EACF,OAEFA,GAAU,EAEVI,OAAOC,oBAAoB,uBAAwBF,GAEnD,MAAM,SAAEG,GAAaF,OAErB,IAAIE,GAAcV,IAAkBU,EAASC,WAEtC,CAEL,MAAMC,EAAUZ,GAAkBU,EAC9B,yCACA,qCAEHT,GAAUY,QAAQC,MAAM,6BAA8BF,GACvDN,EAAQ,KACT,MATCA,EAAQI,EAUX,CAvCGF,OAAOE,SAETH,KAIAC,OAAOO,iBACL,uBACAR,EACA,CAAES,MAAM,IAGVC,YAAW,KACTV,GAAc,GACbL,GAyBJ,IAGH,SAASC,IACP,GAA8B,mBAAnBH,EACT,MAAM,IAAIkB,MAAM,gFAElB,GAAsB,mBAAXjB,EACT,MAAM,IAAIiB,MAAM,wEAElB,GAAuB,kBAAZhB,EACT,MAAM,IAAIgB,MAAM,uEAEnB,CACF,C,qGC3DD,MAAMC,UAAwBC,EAAAA,GAe5BC,cAAuD,IAA3CC,EAA2C,uDAAF,CAAC,EACpDC,SADqDC,EAAAA,EAAAA,GAdLC,KAAAA,mBAAAA,EAAAA,GAAAA,SAcKD,EAAAA,EAAAA,GAZFE,KAAAA,wBAAAA,EAAAA,GAAAA,SAYEF,EAAAA,EAAAA,GAVhBG,KAAAA,OAAAA,EAAAA,GAAAA,WAUgBH,EAAAA,EAAAA,GAR/BI,KAAAA,OAAAA,EAAAA,GAAAA,WAQ+BJ,EAAAA,EAAAA,GANlBK,KAAAA,SAAAA,EAAAA,GAAAA,YAMkBL,EAAAA,EAAAA,GAAAA,KAAAA,cAJlC,IAIkCA,EAAAA,EAAAA,GAAAA,KAAAA,mBAFH,MAIlDM,KAAKC,YAAcT,EAAeS,aAAe,IAClD,CAEGC,eACF,OAAIF,KAAKG,SAAWJ,EAAAA,GAAAA,WAA4BC,KAAKI,iBAC5CJ,KAAKI,iBAEP,IACR,CAEGF,aAASG,GACX,MAAM,IAAIjB,MAAM,kBACjB,CAES,WAACkB,GAGT,GAFAb,MAAMc,kCACNP,KAAKI,uBAA0BI,IAAuB,CAAEtC,gBAAgB,KACnE8B,KAAKI,iBAAkB,MAAMK,EAAAA,GAAAA,aAAuC,uCACzET,KAAKG,OAASJ,EAAAA,GAAAA,MACdC,KAAKU,KAAKC,EAAAA,GAAAA,MAAsBb,EAAAA,GAAAA,UAChC,IACEc,EAAAA,GAAAA,MAAU,iCACNN,EAAQO,cACVb,KAAKc,YAAa,QACZd,KAAKe,UAId,CAFC,MAAO/B,GACPgB,KAAKU,KAAKC,EAAAA,GAAAA,QAAwB3B,EACnC,CACF,CAEDgC,mBAAmBX,GAAoB,CAE1B,gBAOX,GANAZ,MAAMwB,8BAEDjB,KAAKC,cAAaD,KAAKC,aAAciB,EAAAA,EAAAA,IAAetB,EAAAA,GAAAA,OAAyB,IAElFI,KAAKG,OAASJ,EAAAA,GAAAA,WACdC,KAAKU,KAAKC,EAAAA,GAAAA,WAA2B,CAAEQ,QAASrB,EAAAA,GAAAA,YAC3CE,KAAKI,iBAAkB,MAAMgB,EAAAA,GAAAA,kBAAmC,qCACrE,UACQpB,KAAKI,iBAAiBiB,QAAQ,CAAEC,OAAQ,wBAC9C,MAAM,QAAEC,GAAYvB,KAAKI,iBAKzB,GAJImB,IAAavB,KAAKC,YAAkCsB,eAChDvB,KAAKwB,YAAYxB,KAAKC,aAE9BD,KAAKG,OAASJ,EAAAA,GAAAA,WACTC,KAAKE,SAAU,MAAMkB,EAAAA,GAAAA,kBAAmC,mCAM7D,OALApB,KAAKE,SAAShB,KAAK,cAAc,KAE/Bc,KAAKyB,YAAL,IAEFzB,KAAKU,KAAKC,EAAAA,GAAAA,UAA0B,CAAEQ,QAASrB,EAAAA,GAAAA,SAA0B4B,YAAa1B,KAAKc,aACpFd,KAAKE,QAOb,CANC,MAAOlB,GAKP,MAHAgB,KAAKG,OAASJ,EAAAA,GAAAA,MACdC,KAAKc,YAAa,EAClBd,KAAKU,KAAKC,EAAAA,GAAAA,QAAwB3B,GAC5BoC,EAAAA,GAAAA,gBAAiC,uCACxC,CACF,CAEe,mBAAmD,UAAlDd,EAAgCqB,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAAA,CAAEC,SAAS,GAC1D,GAAI5B,KAAKG,SAAWJ,EAAAA,GAAAA,UAA0B,MAAMqB,EAAAA,GAAAA,mBAAoC,6BACxF,QAAKlB,EAAAA,KAAAA,gBAAL,SAAe2B,qBACXvB,EAAQsB,SACV5B,KAAKG,OAASJ,EAAAA,GAAAA,UACdC,KAAKI,iBAAmB,MAGxBJ,KAAKG,OAASJ,EAAAA,GAAAA,MAGhBC,KAAKc,YAAa,EAClBd,KAAKU,KAAKC,EAAAA,GAAAA,aACX,CAEgB,oBACf,GAAIX,KAAKG,SAAWJ,EAAAA,GAAAA,UAA0B,MAAMqB,EAAAA,GAAAA,kBAAmC,yDACvF,MAAO,CAAC,CACT,CAEwB,kBAACnB,GACxB,IAAKD,KAAKI,iBAAkB,MAAMgB,EAAAA,GAAAA,kBAAmC,6BACrE,UACQpB,KAAKI,iBAAiBiB,QAAQ,CAClCC,OAAQ,6BACRQ,OAAQ,CAAC,CAAEP,QAAStB,EAAYsB,WAYnC,CAVC,MAAOQ,GAEP,GAA+C,OAA1CA,EAAiCC,KAMpC,MAAMD,QALA/B,KAAKI,iBAAiBiB,QAAQ,CAClCC,OAAQ,0BACRQ,OAAQ,CAAC,CAAEP,QAAStB,EAAYsB,QAASU,UAAWhC,EAAYiC,YAAaC,QAAS,CAAClC,EAAYmC,cAKxG,CACF,E","sources":["../../src/index.ts","../node_modules/@web3auth/metamask-adapter/src/metamaskAdapter.ts"],"sourcesContent":[null,"import detectEthereumProvider from \"@metamask/detect-provider\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapter,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n} from \"@web3auth/base\";\n\ninterface EthereumProvider extends SafeEventEmitterProvider {\n  isMetaMask?: boolean;\n  isConnected: () => boolean;\n  chainId: string;\n}\nexport interface MetamaskAdapterOptions {\n  chainConfig?: CustomChainConfig;\n}\n\nclass MetamaskAdapter extends BaseAdapter<void> {\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.EIP155;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  readonly name: string = WALLET_ADAPTERS.METAMASK;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  private rehydrated = false;\n\n  private metamaskProvider: EthereumProvider | null = null;\n\n  constructor(adapterOptions: MetamaskAdapterOptions = {}) {\n    super();\n    this.chainConfig = adapterOptions.chainConfig || null;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.metamaskProvider) {\n      return this.metamaskProvider as SafeEventEmitterProvider;\n    }\n    return null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    this.metamaskProvider = (await detectEthereumProvider({ mustBeMetaMask: true })) as EthereumProvider;\n    if (!this.metamaskProvider) throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n    try {\n      log.debug(\"initializing metamask adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  setAdapterSettings(_: unknown): void {}\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    // set default to mainnet\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.METAMASK });\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n    try {\n      await this.metamaskProvider.request({ method: \"eth_requestAccounts\" });\n      const { chainId } = this.metamaskProvider;\n      if (chainId !== (this.chainConfig as CustomChainConfig).chainId) {\n        await this.switchChain(this.chainConfig as CustomChainConfig);\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n      this.provider.once(\"disconnect\", () => {\n        // ready to be connected again\n        this.disconnect();\n      });\n      this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.METAMASK, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    this.provider?.removeAllListeners();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  private async switchChain(chainConfig: CustomChainConfig): Promise<void> {\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    try {\n      await this.metamaskProvider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: chainConfig.chainId }],\n      });\n    } catch (switchError: unknown) {\n      // This error code indicates that the chain has not been added to MetaMask.\n      if ((switchError as { code: number }).code === 4902) {\n        await this.metamaskProvider.request({\n          method: \"wallet_addEthereumChain\",\n          params: [{ chainId: chainConfig.chainId, chainName: chainConfig.displayName, rpcUrls: [chainConfig.rpcTarget] }],\n        });\n      } else {\n        throw switchError;\n      }\n    }\n  }\n}\n\nexport { MetamaskAdapter };\n"],"names":["module","mustBeMetaMask","silent","timeout","_validateInputs","handled","Promise","resolve","handleEthereum","window","removeEventListener","ethereum","isMetaMask","message","console","error","addEventListener","once","setTimeout","Error","MetamaskAdapter","BaseAdapter","constructor","adapterOptions","super","_defineProperty","ADAPTER_NAMESPACES","CHAIN_NAMESPACES","ADAPTER_CATEGORY","WALLET_ADAPTERS","ADAPTER_STATUS","this","chainConfig","provider","status","metamaskProvider","_","options","checkInitializationRequirements","detectEthereumProvider","WalletInitializationError","emit","ADAPTER_EVENTS","log","autoConnect","rehydrated","connect","setAdapterSettings","checkConnectionRequirements","getChainConfig","adapter","WalletLoginError","request","method","chainId","switchChain","disconnect","reconnected","arguments","cleanup","removeAllListeners","params","switchError","code","chainName","displayName","rpcUrls","rpcTarget"],"sourceRoot":""}